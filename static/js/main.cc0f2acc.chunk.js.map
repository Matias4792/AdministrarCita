{"version":3,"sources":["components/Formulario.js","components/Cita.js","App.js","reportWebVitals.js","index.js"],"names":["Formulario","crearCita","id","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","acualizarState","e","target","name","value","className","onSubmit","preventDefault","type","placeholder","onChange","Cita","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevaCitas","filter","titulo","length","console","log","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cc0f2acc.chunk.js","sourcesContent":["import React, {Fragment, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Formulario = ({crearCita, id}) =>{\r\n\r\n    //crear state de citas\r\n    const[cita, actualizarCita] = useState({\r\n        mascota : '',\r\n        propietario : '',\r\n        fecha : '',\r\n        hora : '',\r\n        sintomas : ''\r\n    });\r\n\r\n    const [error, actualizarError] = useState(false);\r\n\r\n    //actualizar State \r\n    const acualizarState = e => {\r\n        actualizarCita({\r\n            ...cita,\r\n        [e.target.name] : e.target.value\r\n    }\r\n        )\r\n    }\r\n\r\n    //Extraer valores de cita\r\n\r\n    const {mascota,propietario,fecha,hora,sintomas} = cita;\r\n\r\n    const submitCita = e =>{\r\n        e.preventDefault();\r\n        \r\n        //validar \r\n        if(mascota === '' || propietario === '' || fecha === '' || hora === '' || sintomas === '')\r\n        {\r\n            actualizarError(true);\r\n            return\r\n        }\r\n        //Eliminar mensaje Previo\r\n        actualizarError(false);\r\n\r\n        //Asignar un ID\r\n        id=id + 1;\r\n        cita.id = id;\r\n\r\n        //Crear Cita\r\n        crearCita(cita);\r\n\r\n        //Reiniciar Form\r\n        actualizarCita({\r\n            mascota : '',\r\n            propietario : '',\r\n            fecha : '',\r\n            hora : '',\r\n            sintomas : ''\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            \r\n            <h1>Crear Cita</h1>\r\n            {error \r\n            ?\r\n            <p className = \"alerta-error\">Todos los campos son obligatorios</p> \r\n            :\r\n            null\r\n            }\r\n            \r\n            <form\r\n                onSubmit = {submitCita}\r\n                >\r\n                <label>Nombre Mascota</label>\r\n                <input \r\n                    type=\"text\"\r\n                    name=\"mascota\"\r\n                    className=\"u-full-width\"\r\n                    placeholder = \"Nombre Mascota\"\r\n                    onChange = {acualizarState}\r\n                    value={mascota}\r\n                />\r\n                <label>Nombre Dueño</label>\r\n                <input \r\n                    type=\"text\"\r\n                    name=\"propietario\"\r\n                    className=\"u-full-width\"\r\n                    placeholder = \"Nombre Dueño de la Mascota\"\r\n                    onChange = {acualizarState}\r\n                    value={propietario}\r\n                />\r\n                <label>Fecha</label>\r\n                <input \r\n                    type=\"date\"\r\n                    name=\"fecha\"\r\n                    className=\"u-full-width\"\r\n                    onChange = {acualizarState}\r\n                    value={fecha}\r\n                />\r\n                <label>Hora</label>\r\n                <input \r\n                    type=\"time\"\r\n                    name=\"hora\"\r\n                    className=\"u-full-width\"\r\n                    onChange = {acualizarState}\r\n                    value={hora}\r\n                />\r\n                <label>Sintomas</label>\r\n                <textarea\r\n                    name=\"sintomas\"\r\n                    className=\"u-full-width \"\r\n                    onChange = {acualizarState}\r\n                    value={sintomas}                \r\n                >\r\n                </textarea>\r\n\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"u-full-width button-primary\"\r\n                >Agregar Cita</button>\r\n\r\n            </form>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nFormulario.propTypes = {\r\n    crearCita : PropTypes.func.isRequired\r\n}\r\n\r\nexport default Formulario ;\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Cita = ({cita, eliminarCita}) =>(\r\n    \r\n    <div className = \"cita\">\r\n        <p>Mascota: <span>{cita.mascota}</span> </p>\r\n        <p>Propietario: <span>{cita.propietario}</span> </p>\r\n        <p>Fecha: <span>{cita.fecha}</span> </p>\r\n        <p>Hora: <span>{cita.hora}</span> </p>\r\n        <p>Sintomas: <span>{cita.sintomas}</span> </p>\r\n        <button\r\n            className = \"button eliminar u-full-width\"\r\n            onClick = {() => eliminarCita(cita.id)}\r\n        >Eliminar &times;</button>\r\n    </div>\r\n)\r\nCita.propTypes = {\r\n    Cita : PropTypes.object.isRequired,\r\n    eliminarCita : PropTypes.func.isRequired\r\n}\r\n\r\nexport default Cita;","import React, {Fragment, useState, useEffect} from 'react';\nimport Formulario from './components/Formulario';\nimport Cita from './components/Cita';\n \n\nfunction App() {\n\n  let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n\n  if(!citasIniciales)\n    citasIniciales = [];\n\n  const [citas, guardarCitas] = useState(citasIniciales);\n\n  //Use Effect para realizar ciertas operaciones\n  useEffect(()=>{\n    if(citasIniciales){\n      localStorage.setItem('citas',JSON.stringify(citas));\n    }\n    else{\n      localStorage.setItem('citas',JSON.stringify([]));\n    }\n  },[citas, citasIniciales])\n  \n  //Funcion para crear y agregar citas\n  const crearCita = cita => {\n    guardarCitas([...citas,cita]);\n    console.log(citas);\n  }\n\n  //Eliminar Cita\n\n  const eliminarCita = id => {\n    const nuevaCitas = citas.filter(cita => cita.id !== id);\n    guardarCitas(nuevaCitas);\n  }\n\n  //titulo\n\n  const titulo = citas.length === 0 ? 'No hay Citas' : 'Administra tu citas';\n  let id = citas.length;\n  return (\n    <Fragment>\n    <h1>Administra tu Citas</h1>\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"one-half column\">\n          <Formulario \n          crearCita = {crearCita}\n          id = {id}\n          />\n        </div>\n        <div className=\"one-half column\">\n        <h2>{titulo}</h2>\n          {citas.map(cita =>\n            (<Cita\n                key = {cita.id}\n                cita = {cita} \n                eliminarCita = {eliminarCita}/>\n            ))}\n        </div>\n      </div>\n    </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}